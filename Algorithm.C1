  
// Initialize all vertices as not visited
// Following up every vertex ‘v’
       // (a)  If ‘v’ is not visited before, call D,
// FSUtill (v)
    // (b) Print new line character 
//DFSUtill (v)
//(1)	Mark ‘v’ as visited
//(2)	Print ‘v’
//(3)	Do following for every adjacent ‘u’ of ‘v’.
   // If ‘u’ is not visited, then recursively         
//(4)	DFSUtill(u)
  //Implementation of above algorithm 
// C++ program to print connected components in
// an undirected graph

#include<isotream>
#include<list>
Using namespace std;
//Graph class represents a undirected graph
//using adjacency list representation
Class graph
{
int V;    // No. of vertices
// Pointer to array containing adjacency lists
list<int> * adj;
//A functions used by DFS
void DFSUtil(int v. bool visited []);
public:
Graph (int v);   // constructor
void addEdge(int v,int w);
void connectedComponents ();
};
//Method to print connectedComponents in an
//undirected graph
void Graph: connectedComponents();
{
// Mark all the vertices as not visited
 bool* visited = new bool[v];
for (int v = 0;  v < V; v ++)
      visited[v] = false;
for(int v=0; v<V; v++)
}
if (visited[v]) == false)
{
//print all reachable vertices
// from v
DFSUtill(v, visited);
cout<<”\n”;
}
    }    
           }                 

Void Graph:: DFSUtil(int v, bool visited[])
// Mark the current node as visited and print it
visited[v]  = true;
cout << v <<  “”;
// Recur for all the vertices
//adjacent to this vertex
list <int>:: iterator i;
for(i = adj[v]. begin(); i != adj[v].end(); ++i)
if(! visited[*i,]);
    DFSUtil(*i, visited);
}
Graph:: Graph(int v)
{
this -> v = v;
adj = new list <int>[v];
}
//method to add an undirected edge
Void Graph: addEdge(int u, int v)
{
adj[v].push_back(v)
adj[u].push_back (u)
}
//Drive program to test above program
int main ()
{
// Create a graph given in the above diagram
Graph g (17); // 17 vertices numbered from 0 to 17
g. addEdge (17,15);
g.addEdge (1, 8);
g.addEdge(1,12);
g.addEdge(5,11);
g.addEdge(11,9);
g.addEdge(9,15);
g.addEdge(15,5);
g.addEgde(4,13);
g.addEdge (3, 13);
g.addEdge (4, 3);
g.addEdge (10, 16);
g.addEdge(16,7); 
g.addEdge(14,3);
g.addEdge (14, 4);
g. addEdge (17,6)
cout << ”Following are connected components\n”
g.connectedComponents();
return 0;
}
